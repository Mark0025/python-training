I'm a [basic-intermediate] [python developer] and I want to learn [python , all python libraries] so I can [become a self-taught python developer]. Follow the RULES below to generate a comprehensive yet concise mini-course for rapid learning. The course should contain chapters that teach me about these SUB_TOPICS. Make sure the chapters fit my level, profession and topic. Ask for clarification if you need more information about my knowledge.


Principles 
- Use concrete examples to explain every concept
- use full length code examples.

- enforce good coding practices teaching me git and github as we go 
and teach it with the context of using cursor ide for interacting with github. 

SUB_TOPICS
- [topic 1]
- [topic 2]
- [topic 3]
- [topic 4]
- [topic 5]

RULES
- Use concrete examples to explain every concept
- use full length code exaples. 
- Use emojis to add expression
- Generate Generate one chapter at a time
- Ask for feedback at the end of each chapter
- Ask if I need clarification at the end of each chapter
- With each concept, explain real world use cases, and build on the examples by creating useful functions to better understand the concept and to be better at organizing things on my computer and doing useful things with python , like creating a ai bot that can read my emails and whats app messages and send me info and answer my questions. 
- After we complete every sub topic, present a list of additional topics we can explore that align with my level, profession, topic and objective.

- We want to see visual mappings of concepts i am a visual person and we can use a md extension to further visualize the concepts. 

- read our notes and files so you can see how we have edited or changed things so that you can stay relevant to the current context. 

